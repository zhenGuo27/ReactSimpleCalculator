{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["str","numbers","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","record","current","isAfterOper","input","console","log","isOperator","setState","temp","calculate","clear","a","b","split","replace","insertOper","length","j","indexOf","sp","m","splitOper","oper","sum","r","switchOper","parseInt","target","item","multiply","toString","divided","array","index","len","i","splice","add","minus","_this2","listItems","map","number","react_default","createElement","className","key","onClick","e","getInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f768aeb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\n\nlet str = \"\";\nconst numbers = [1, 2, 3, \"+\", 4, 5, 6, \"-\", 7, 8, 9, \"×\", \"C\", 0 , \"=\", \"÷\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      record: \"\",\n      current: 0,\n      isAfterOper: false\n    };\n  }\n\n  getInput(input) {\n    //debugger;\n    str+=input;\n    console.log(str);\n\n    if(input === \"C\") {\n      this.clear();\n      return;\n    }\n\n    if(input === \"=\") {\n      this.calculate();\n      return;\n    }\n\n    if(this.isOperator(input)){\n      this.setState({record: str});\n      this.setState({isAfterOper: true});\n    } else {\n      let temp = (this.state.current === 0 || this.state.isAfterOper) ? input: this.state.current + input;\n      this.setState({current: temp});\n      this.setState({isAfterOper: false});\n    }\n  }\n\n  add(a, b) {\n    return a + b;\n  }\n\n  minus(a, b) {\n    return a - b;\n  }\n\n  multiply(a, b) {\n    return a * b;\n  }\n\n  divided(a, b) {\n    return a / b;\n  }\n\n  clear() {\n    str = \"\";\n    this.setState({record: str});\n    this.setState({isAfterOper: false});\n    this.setState({current: 0});\n  }\n\n  calculate() {\n    debugger;\n\n    str = str.replace(\"=\", \"\");\n    let split = str.split(\"+\");\n    this.insertOper(\"+\", split, 0, split.length);\n\n    for(let j=1; j<split.length; j++) {\n      if(split[j].indexOf(\"-\")!==-1 && split[j].length > 1) {\n        let t = split[j];\n        let sp = t.split(\"-\");\n        for(let m=0; m < sp.length; m++) {\n          split[j+m] = sp[m];\n        }\n        this.insertOper(\"-\", split, j, sp.length);\n      } \n      \n      /*if(split[j].indexOf(\"×\")!==-1) {\n        let temp = split[j].split(\"×\");\n        split[j] = this.multiply(temp[0], temp[1]).toString();\n      } \n      \n      if(split[j].indexOf(\"÷\")!==-1) {\n        let temp2 = split[j].split(\"÷\");\n        split[j] = this.divided(temp2[0], temp2[1]).toString();\n      }*/\n\n      split[j] = this.splitOper(\"×\", split[j]);\n      split[j] = this.splitOper(\"÷\", split[j]);\n    }\n\n    let b = 0;\n    let oper = \"\";\n    let sum=split[0];\n    for(let r=1; r < split.length; r++) {\n      if(this.isOperator(split[r])) {\n        oper = split[r];\n      } else if(b === 0) {\n        b = split[r];\n        sum = this.switchOper(oper, parseInt(sum, 10), parseInt(b, 10));\n        b = 0;\n        oper = \"\";\n      } \n    }\n\n    str = \"\";\n    this.setState({current: sum});\n    this.setState({record: str});\n  }\n\n  splitOper(target, item) {\n    let temp = [];\n    if(item.indexOf(target)!==-1) {\n      temp = item.split(target);\n      if(target === \"×\") {\n        item = this.multiply(temp[0], temp[1]).toString();\n      } else {\n        item = this.divided(temp[0], temp[1]).toString();\n      }\n    } \n    return item;\n  }\n\n  insertOper(oper, array, index, len) {\n    for(let i=1; i < len; i+=2) {\n      array.splice(i+index, 0, oper);\n    }\n    return array;\n  }\n\n  switchOper(oper, a, b) {\n    let r = 0;\n    if(oper === \"+\") { r = this.add(a, b); }\n    if(oper === \"-\") { r = this.minus(a, b); }\n    if(oper === \"×\") { r = this.multiply(a, b); }\n    if(oper === \"÷\") { r = this.divided(a, b); } \n    return r;\n  }\n\n  isOperator(str) {\n    if(str === \"+\" || str === \"-\" || str === \"×\" || str === \"÷\") {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    const listItems = numbers.map((number) => \n      <div className=\"calcItem\" key={number.toString()} onClick={(e) => { this.getInput(number.toString())}}>\n        {number}\n      </div>   \n    );\n\n    return (\n      <div className=\"calcWrapper\">\n        <div className=\"resultBlock\">\n          <div>{this.state.record}</div>\n          <div>{this.state.current}</div>\n        </div>\n        <div className=\"calc\">\n          {listItems}\n        </div>\n      </div>     \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
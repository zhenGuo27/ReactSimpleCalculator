{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["str","numbers","cal","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","record","current","input","isOperatorPlusOrMinus","push","length","calculate","setState","join","clear","a","b","parseInt","c","temp","indexOf","split","multiply","divided","sum","s","add","minus","toString","_this2","listItems","map","number","react_default","createElement","className","key","onClick","e","getInput","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e849556.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nlet str = \"\";\r\nconst numbers = [1, 2, 3, \"+\", 4, 5, 6, \"-\", 7, 8, 9, \"×\", \"C\", 0 , \"=\", \"÷\"];\r\nlet cal = [];\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      record: \"\",\r\n      current: 0\r\n    };\r\n  }\r\n\r\n  getInput(input) {\r\n    if(input === \"C\") {\r\n      this.clear();\r\n      return;\r\n    }\r\n\r\n    if(this.isOperatorPlusOrMinus(input)) {\r\n      cal.push(str);\r\n      cal.push(input);\r\n      str = \"\";\r\n    } else if(input === \"=\") {\r\n      if(str.length == 0) return;\r\n      \r\n      cal.push(str);\r\n      str = \"\";\r\n      this.calculate();\r\n      return;\r\n    } else if(str === \"0\") {\r\n      str = input;\r\n    } else {\r\n      str+= input;\r\n    }\r\n\r\n    this.setState({record: cal.join(\"\")});\r\n    this.setState({current: str});\r\n  }\r\n\r\n  add(a, b) {\r\n    return parseInt(a, 10) + parseInt(b, 10);\r\n  }\r\n\r\n  minus(a, b) {\r\n    return parseInt(a, 10) - parseInt(b, 10);\r\n  }\r\n\r\n  multiply(a, b) {\r\n    return parseInt(a, 10) * parseInt(b, 10);\r\n  }\r\n\r\n  divided(a, b) {\r\n    return parseInt(a, 10) / parseInt(b, 10);\r\n  }\r\n\r\n  clear() {\r\n    str = \"\";\r\n    cal = [];\r\n    this.setState({record: str});\r\n    this.setState({current: 0});\r\n  }\r\n\r\n  calculate() {\r\n    debugger;\r\n\r\n    for(let c=0; c < cal.length; c++) {\r\n      let temp = [];\r\n      if(this.isOperatorPlusOrMinus(cal[c])) continue;\r\n\r\n      if(cal[c].indexOf(\"×\")!=-1) {\r\n        temp = cal[c].split(\"×\");\r\n        cal[c] = this.multiply(temp[0], temp[1]);\r\n      } else if(cal[c].indexOf(\"÷\")!=-1) {\r\n        temp = cal[c].split(\"÷\");\r\n        cal[c] = this.divided(temp[0], temp[1]);\r\n      }\r\n    }\r\n\r\n    let sum = 0;\r\n    for(let s=0; s< cal.length; s++) {\r\n      if(cal[s] === \"+\") {\r\n        cal[s+1] = this.add(cal[s-1], cal[s+1]);\r\n      } else if(cal[s] === \"-\") {\r\n        cal[s+1] = this.minus(cal[s-1], cal[s+1]); \r\n      }\r\n    }\r\n    sum = cal[cal.length-1];\r\n\r\n    this.setState({record: \"\"});\r\n    this.setState({current: sum});\r\n    str = sum.toString();\r\n    cal = [];\r\n  }\r\n\r\n  isOperatorPlusOrMinus(str) {\r\n    if(str === \"+\" || str === \"-\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    const listItems = numbers.map((number) => \r\n      <div className=\"calcItem\" key={number.toString()} onClick={(e) => { this.getInput(number.toString())}}>\r\n        {number}\r\n      </div>   \r\n    );\r\n\r\n    return (\r\n      <div className=\"calcWrapper\">\r\n        <div className=\"resultBlock\">\r\n          <div>{this.state.record}</div>\r\n          <div>{this.state.current}</div>\r\n        </div>\r\n        <div className=\"calc\">\r\n          {listItems}\r\n        </div>\r\n      </div>     \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}